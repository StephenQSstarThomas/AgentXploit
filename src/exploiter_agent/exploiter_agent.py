import os
from dotenv import load_dotenv
from google.adk.agents import LlmAgent
from google.adk.runners import InMemoryRunner
from google.genai.types import UserContent
from google.adk.models.lite_llm import LiteLlm
from .tools.docker_manager import docker_manager
from .tools.file_handler import file_handler
from .tools.trace_analyzer import trace_analyzer
from .tools.container_exec import container_exec

load_dotenv()

class ExploitAgent:

    def __init__(self, target_info):
        self.target_info = target_info
        self.docker_config = os.getenv("DEFAULT_DOCKER_COMMAND")
        self.exec_command = os.getenv("EXECUTION_COMMAND")
        self.agent = self._build_adk_agent(target_info)

    def _build_system_prompt(self, target_info):
        return f"""You are an agent testing framework for security research.

Target Information: {target_info}

Available Tools:
- docker_manager: Create, start, stop, check status, and remove containers
- container_exec: Execute any command in the container (strace, gdb, ltrace, etc.)
- file_handler: Copy files to/from container, read/write files, list directories
- trace_analyzer: Analyze trace output data

Phase 1-2 Goal: Prepare environment and run target agent to collect execution traces.

Suggested Steps:
1. Set up Docker container environment
2. Execute commands to prepare the testing environment
3. Run the target agent and collect output
4. Analyze results using available tools

Use container_exec to run debugging tools like strace, gdb, ltrace as needed."""

    def _build_adk_agent(self, target_info):
        model_name = os.getenv("EXPLOIT_AGENT_MODEL")
        system_prompt = self._build_system_prompt(target_info)
        llm = LiteLlm(model=model_name)

        agent = LlmAgent(
            model=llm,
            name="exploit_agent",
            description="Agent testing framework for security research",
            instruction=system_prompt,
            tools=[docker_manager, file_handler, trace_analyzer, container_exec]
        )

        return agent

    def _initialize_environment(self):
        pass

    def run(self, goal=None, max_turns=10):
        if goal is None:
            goal = f"Set up the environment and run the target agent with execution command: {self.exec_command}"

        runner = InMemoryRunner(agent=self.agent, max_turns=max_turns)
        result = runner.run(user_content=UserContent(parts=[goal]))
        return result
