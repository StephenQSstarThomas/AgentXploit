import subprocess
from typing import Literal, Optional

def docker_manager(
    action: Literal["status", "create", "start", "stop", "exec", "remove"],
    container_name: str,
    image: str,
    command: str
) -> dict:
    """Manage Docker containers for agent testing environments.

    Actions:
    - status: Check if container is running/stopped/not_found
    - create: Create new container with image
    - start: Start stopped container
    - stop: Stop running container
    - exec: Execute command in container
    - remove: Remove container

    Returns dict with success, status, output, and error fields.
    """
    if action == "status":
        result = subprocess.run(
            ["docker", "inspect", "-f", "{{.State.Running}}", container_name],
            capture_output=True, text=True
        )
        if result.returncode == 0:
            is_running = result.stdout.strip() == "true"
            return {"success": True, "status": "running" if is_running else "stopped", "output": "", "error": None}
        return {"success": True, "status": "not_found", "output": "", "error": None}

    elif action == "create":
        result = subprocess.run(command, shell=True, capture_output=True, text=True)
        return {
            "success": result.returncode == 0,
            "status": "running" if result.returncode == 0 else "failed",
            "output": result.stdout.strip(),
            "error": result.stderr.strip() if result.returncode != 0 else None
        }

    elif action == "start":
        result = subprocess.run(["docker", "start", container_name], capture_output=True, text=True)
        return {
            "success": result.returncode == 0,
            "status": "running" if result.returncode == 0 else "failed",
            "output": result.stdout.strip(),
            "error": result.stderr.strip() if result.returncode != 0 else None
        }

    elif action == "stop":
        result = subprocess.run(["docker", "stop", container_name], capture_output=True, text=True)
        return {
            "success": result.returncode == 0,
            "status": "stopped" if result.returncode == 0 else "failed",
            "output": result.stdout.strip(),
            "error": result.stderr.strip() if result.returncode != 0 else None
        }

    elif action == "exec":
        result = subprocess.run(["docker", "exec", container_name, "bash", "-c", command], capture_output=True, text=True)
        return {
            "success": result.returncode == 0,
            "status": "executed",
            "output": result.stdout.strip(),
            "error": result.stderr.strip() if result.returncode != 0 else None
        }

    elif action == "remove":
        result = subprocess.run(["docker", "rm", "-f", container_name], capture_output=True, text=True)
        return {
            "success": result.returncode == 0,
            "status": "removed" if result.returncode == 0 else "failed",
            "output": result.stdout.strip(),
            "error": result.stderr.strip() if result.returncode != 0 else None
        }

    raise
