import docker
import tarfile
import io
import os
from typing import Optional

client = docker.from_env()

def docker_manager(
    action: str,
    container_name: Optional[str] = None,
    image: Optional[str] = None,
    command: Optional[str] = None,
    src_path: Optional[str] = None,
    dest_path: Optional[str] = None,
    environment: Optional[dict] = None,
    auto_remove: Optional[bool] = None,
    remove: Optional[bool] = None,
    detach: Optional[bool] = None,
    volumes: Optional[dict] = None,
    ports: Optional[dict] = None,
    network_mode: Optional[str] = None,
    working_dir: Optional[str] = None,
    user: Optional[str] = None,
    **kwargs
) -> dict:
    """Manage Docker containers with Docker SDK.

    Actions:
    - run: Create and start container (image required, command optional)
    - exec: Execute command in container
    - copy: Copy file/directory to container
    - logs: Get container logs
    - stop: Stop container
    - remove: Remove container
    """

    if action == "run":
        if not image:
            raise

        # Build run parameters
        run_params = {
            "image": image,
            "command": command,
            "name": container_name,
            "detach": detach if detach is not None else True,
            "auto_remove": auto_remove if auto_remove is not None else False,
            "remove": remove if remove is not None else False,
        }

        # Add optional parameters if provided
        if environment is not None:
            run_params["environment"] = environment
        if volumes is not None:
            run_params["volumes"] = volumes
        if ports is not None:
            run_params["ports"] = ports
        if network_mode is not None:
            run_params["network_mode"] = network_mode
        if working_dir is not None:
            run_params["working_dir"] = working_dir
        if user is not None:
            run_params["user"] = user

        # Add any additional kwargs
        run_params.update(kwargs)

        container = client.containers.run(**run_params)
        return {"container_id": container.id, "name": container.name}

    if not container_name:
        raise

    container = client.containers.get(container_name)

    if action == "exec":
        if not command:
            raise
        exit_code, output = container.exec_run(command, demux=True)
        stdout = output[0].decode() if output[0] else ""
        stderr = output[1].decode() if output[1] else ""
        return {"exit_code": exit_code, "stdout": stdout, "stderr": stderr}

    elif action == "copy":
        if not src_path or not dest_path:
            raise

        tar_stream = io.BytesIO()
        with tarfile.open(fileobj=tar_stream, mode='w') as tar:
            arcname = os.path.basename(src_path)
            tar.add(src_path, arcname=arcname)
        tar_stream.seek(0)

        dest_dir = os.path.dirname(dest_path)
        container.put_archive(dest_dir, tar_stream)
        return {"status": "copied"}

    elif action == "logs":
        logs = container.logs(stdout=True, stderr=True).decode()
        return {"logs": logs}

    elif action == "stop":
        container.stop()
        return {"status": "stopped"}

    elif action == "remove":
        container.remove(force=True)
        return {"status": "removed"}

    raise
