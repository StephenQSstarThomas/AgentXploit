import os
import yaml
from typing import Optional
from tools.docker_manager import docker_manager

def run_target_agent(container_name: str, config_path: Optional[str] = None) -> dict:
    """Execute target agent in container and retrieve the report.

    Args:
        container_name: Name of the running container
        config_path: Optional path to config.yaml file (defaults to ../config.yaml)

    Returns:
        dict: Contains execution result and report content
            - exit_code: Command exit code
            - stdout: Standard output
            - stderr: Standard error
            - report: Content of the report file (or latest JSON from directory)
            - local_report_path: Path to saved report file
    """
    # Load config to get execution command and report path
    if config_path is None:
        config_path = os.path.join(os.path.dirname(__file__), '..', 'config.yaml')

    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)

    exec_command = config['execution']['command']
    report_path = config['execution']['report_path']
    local_dest = config['execution'].get('local_dest', './reports')

    # Step 0: Copy essential files to container before execution
    essential_files = config.get('essential_files', {}).get('files', [])
    if essential_files:
        for file_info in essential_files:
            try:
                docker_manager(
                    action='copy',
                    container_name=container_name,
                    src_path=file_info['local'],
                    dest_path=file_info['container']
                )
            except Exception as e:
                return {
                    "exit_code": -1,
                    "stdout": "",
                    "stderr": f"Failed to copy essential file {file_info['local']}: {str(e)}",
                    "report": None,
                    "report_error": str(e),
                    "local_report_path": None,
                    "status": "failed"
                }

    # Step 1: Execute the command in container
    exec_result = docker_manager(
        action='exec',
        container_name=container_name,
        command=exec_command
    )

    # Step 2: Check if report_path is a file or directory
    check_type_cmd = f'test -d {report_path} && echo "DIRECTORY" || echo "FILE"'
    type_result = docker_manager(
        action='exec',
        container_name=container_name,
        command=check_type_cmd
    )

    report_result = None
    trace_file = None

    if 'DIRECTORY' in type_result.get('stdout', ''):
        # It's a directory, find the latest JSON file by modification time (most recent first)
        find_cmd = f"find {report_path} -name '*.json' -type f -printf '%T@ %p\\n' | sort -rn | head -1 | cut -d' ' -f2-"
        find_result = docker_manager(
            action='exec',
            container_name=container_name,
            command=find_cmd
        )

        trace_file = find_result.get('stdout', '').strip()

        if trace_file and find_result['exit_code'] == 0:
            # Read the latest JSON file
            report_result = docker_manager(
                action='exec',
                container_name=container_name,
                command=f'cat {trace_file}'
            )
        else:
            # No JSON files found
            report_result = {
                'exit_code': 1,
                'stdout': '',
                'stderr': f'No JSON files found in directory {report_path}'
            }
    else:
        # It's a file, read directly
        trace_file = report_path
        report_result = docker_manager(
            action='exec',
            container_name=container_name,
            command=f'cat {report_path}'
        )

    # Step 3: Save report to local destination
    local_report_path = None
    if report_result and report_result['exit_code'] == 0 and report_result['stdout']:
        # Create local destination directory
        local_dest_abs = os.path.abspath(local_dest)
        os.makedirs(local_dest_abs, exist_ok=True)

        # Determine filename based on trace_file
        if trace_file:
            filename = os.path.basename(trace_file)
        else:
            filename = 'report.txt'

        # Save report to local file
        local_report_path = os.path.join(local_dest_abs, filename)
        with open(local_report_path, 'w') as f:
            f.write(report_result['stdout'])

    return {
        "exit_code": exec_result['exit_code'],
        "stdout": exec_result['stdout'],
        "stderr": exec_result['stderr'],
        "report": report_result['stdout'] if report_result and report_result['exit_code'] == 0 else None,
        "report_error": report_result['stderr'] if report_result and report_result['exit_code'] != 0 else None,
        "local_report_path": local_report_path,
        "trace_file": trace_file,
        "status": "success" if local_report_path else "failed"
    }
