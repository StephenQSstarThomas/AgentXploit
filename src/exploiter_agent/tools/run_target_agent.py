import os
import yaml
from typing import Optional
from tools.docker_manager import docker_manager

def run_target_agent(container_name: str, config_path: Optional[str] = None) -> dict:
    """Execute target agent in container and retrieve the report.

    Args:
        container_name: Name of the running container
        config_path: Optional path to config.yaml file (defaults to ../config.yaml)

    Returns:
        dict: Contains execution result and report content
            - exit_code: Command exit code
            - stdout: Standard output
            - stderr: Standard error
            - report: Content of the report file
    """
    # Load config to get execution command and report path
    if config_path is None:
        config_path = os.path.join(os.path.dirname(__file__), '..', 'config.yaml')

    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)

    exec_command = config['execution']['command']
    report_path = config['execution']['report_path']
    local_dest = config['execution'].get('local_dest', './reports')

    # Step 1: Execute the command in container
    exec_result = docker_manager(
        action='exec',
        container_name=container_name,
        command=exec_command
    )

    # Step 2: Read the report file from container
    report_result = docker_manager(
        action='exec',
        container_name=container_name,
        command=f'cat {report_path}'
    )

    # Step 3: Save report to local destination
    local_report_path = None
    if report_result['exit_code'] == 0 and report_result['stdout']:
        # Create local destination directory
        local_dest_abs = os.path.abspath(local_dest)
        os.makedirs(local_dest_abs, exist_ok=True)

        # Save report to local file
        local_report_path = os.path.join(local_dest_abs, 'report.txt')
        with open(local_report_path, 'w') as f:
            f.write(report_result['stdout'])

    return {
        "exit_code": exec_result['exit_code'],
        "stdout": exec_result['stdout'],
        "stderr": exec_result['stderr'],
        "report": report_result['stdout'] if report_result['exit_code'] == 0 else None,
        "report_error": report_result['stderr'] if report_result['exit_code'] != 0 else None,
        "local_report_path": local_report_path,
        "status": "success" if local_report_path else "failed"
    }
