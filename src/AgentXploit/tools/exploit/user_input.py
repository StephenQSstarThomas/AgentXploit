"""
User Input Handler for AgentXploit - Simple and Clean
"""

import sys
import asyncio
from typing import Optional


def get_user_input_sync(prompt: str = "Your input: ") -> str:
    """Get user input synchronously."""
    try:
        return input(prompt).strip()
    except (EOFError, KeyboardInterrupt):
        return "quit"


async def get_user_input_async(prompt: str = "Your input: ") -> str:
    """Get user input asynchronously."""
    loop = asyncio.get_event_loop()
    
    def get_input():
        return get_user_input_sync(prompt)
    
    return await loop.run_in_executor(None, get_input)


def display_message(message: str, newline: bool = True):
    """Display a message to the user."""
    if newline:
        print(message)
    else:
        print(message, end="")
    sys.stdout.flush()


async def display_message_async(message: str, newline: bool = True):
    """Display a message to the user asynchronously."""
    display_message(message, newline)


def display_task_menu():
    """Display the interactive task menu."""
    print("\n" + "="*50)
    print("AGENTXPLOIT INTERACTIVE MODE")
    print("="*50)


def display_options():
    """Display available options to the user."""
    print("\nOptions:")
    print("  1. Type 'y' or 'yes' to proceed with current task")
    print("  2. Provide a custom instruction/command")
    print("  3. Provide a file path (e.g., './README.md', 'config.json')")
    print("  4. Type 'quit' to exit")
    print()


def confirm_task_execution(task_name: str, command_count: int) -> bool:
    """Confirm task execution with the user."""
    print(f"\nReady to execute: {task_name}")
    print(f"Total commands: {command_count}")
    print("\nThis will execute analysis commands on your system.")
    
    while True:
        response = get_user_input_sync("Continue? (y/n): ").lower()
        
        if response in ['y', 'yes']:
            return True
        elif response in ['n', 'no', 'quit', 'q']:
            return False
        else:
            print("Please enter 'y' for yes or 'n' for no.")


async def confirm_task_execution_async(task_name: str, command_count: int) -> bool:
    """Confirm task execution with the user asynchronously."""
    await display_message_async(f"\nReady to execute: {task_name}")
    await display_message_async(f"Total commands: {command_count}")
    await display_message_async("\nThis will execute analysis commands on your system.")
    
    while True:
        response = await get_user_input_async("Continue? (y/n): ")
        response = response.lower()
        
        if response in ['y', 'yes']:
            return True
        elif response in ['n', 'no', 'quit', 'q']:
            return False
        else:
            await display_message_async("Please enter 'y' for yes or 'n' for no.")


__all__ = [
    'get_user_input_async',
    'get_user_input_sync', 
    'display_message',
    'display_message_async',
    'display_task_menu',
    'display_options',
    'confirm_task_execution',
    'confirm_task_execution_async'
]